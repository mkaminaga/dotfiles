" Plugin settings for .vimrc.
" Author  Mamoru Kaminaga
" Since 2021
"
" Factorization of vimrc plugins.
" Plugins are loaded from UNIX like terminals.
"

" EasyMotion auto installation.
" See also
" https://qiita.com/kawaz/items/ee725f6214f91337b42b

"dein Scripts-----------------------------
if &compatible
  set nocompatible               " Be iMproved
endif
let s:cache_home=empty($XDG_CACHE_HOME) ? expand('~/.cache') : $XDG_CACHE_HOME
let s:dein_dir=s:cache_home . '/dein'
let s:dein_repo_dir=s:dein_dir . '/repos/github.com/Shougo/dein.vim'
if !isdirectory(s:dein_repo_dir)
  call system('git clone https://github.com/Shougo/dein.vim ' . shellescape(s:dein_repo_dir))
endif
let &runtimepath=&runtimepath .",". s:dein_repo_dir

" Add the dein installation directory into runtimepath.
if dein#load_state(s:dein_dir)
  call dein#begin(s:dein_dir)

  " For dein itself.
  call dein#add(s:dein_repo_dir)

  " For the improvement of visual.
  call dein#add('tomasr/molokai')
  call dein#add('itchyny/lightline.vim')

  " For the improvement of editing experience.
  call dein#add('tomtom/tcomment_vim')
  call dein#add('easymotion/vim-easymotion')
  call dein#add('jiangmiao/auto-pairs')
  call dein#add('tpope/vim-surround')
  call dein#add('tpope/vim-repeat')

  " for C/C++ code formatting.
  call dein#add('rhysd/vim-clang-format')
  call dein#add('kana/vim-operator-user')

  " for Unity C#
  " call dein#add('OmniSharp/omnisharp-vim', {'on_ft' : 'cs'})
  call dein#add('Shougo/vimproc.vim', {'build' : 'make'})
  call dein#add('Shougo/neocomplete.vim')

  call dein#end()
  call dein#save_state()
endif

if has('vim_starting') && dein#check_install()
  let g:dein#auto_recache = 1

  call dein#install()
  call map(dein#check_clean(), "delete(v:val, 'rf')")
endif

"End dein Scripts-------------------------

" Motion plugin.
" easymotion/vim-easymotion
let g:EasyMotion_do_mapping=1
let g:EasyMotion_leader_key="\<Leader>"
let g:EasyMotion_keys='asdfghjklgyuiopqwertnmzxcvb,./\@:[]'
let g:EasyMotion_smartcase=1
map <Leader> <Plug>(easymotion-prefix)
map sf <Plug>(easymotion-f)
map sF <Plug>(easymotion-F)
map st <Plug>(easymotion-t)
map sT <Plug>(easymotion-T)
map sw <Plug>(easymotion-w)
map sW <Plug>(easymotion-W)
map sb <Plug>(easymotion-b)
map sB <Plug>(easymotion-B)
map se <Plug>(easymotion-e)
map sE <Plug>(easymotion-E)
map sge <Plug>(easymotion-g)
map sgE <Plug>(easymotion-g)
map sj <Plug>(easymotion-j)
map sk <Plug>(easymotion-k)
map sn <Plug>(easymotion-n)
map sN <Plug>(easymotion-N)
map ss <Plug>(easymotion-s)

" Formatter plugin.
" rhysd/vim-clang-format
" kana/vim-operator-user
"
" Dependencies:
" C/C++ http://releases.llvm.org/download.html
"
" TODO: error message when not exists
"       手動で導入が必要、かつ、インストールの自動化が難しいツールについては、
"       初期化時に未導入のエラーメッセージを出力する対応とする。
" TODO: C/C++ only
"
let g:clang_format#code_style='google'
let g:clang_format#style_options = {
      \ "Standard" : "C++11"}

augroup ClangFormatSettings
  autocmd!
  autocmd FileType c,cpp,objc nnoremap <Leader>f :ClangFormat<CR>
  autocmd FileType c,cpp,objc vnoremap <Leader>f :ClangFormat<CR>
augroup END

if 0
" Unity C#
" 'OmniSharp/omnisharp-vim'
if (has('win32_unix'))
  " http version
  " - Works on Cygwin
  " - Requires python 2 or 3, and, either vim-dispatch or vimproc.vim
  let g:OmniSharp_server_stdio = 0
  let g:OmniSharp_server_path = '/usr/local/bin/omnisharp.http-win-x64/OmniSharp.exe'

  if !(has('python3') || has('python'))
    echoerr 'Http version of OmniSharp requires python enabled'
  endif
else
  " stdio version
  " - Works on Unix, WSL, etc
  " - No python is required
  let g:OmniSharp_server_stdio = 1
  let g:OmniSharp_server_path = '/usr/local/bin/omnisharp-win-x64/OmniSharp.exe'
endif

" Install manually
if !filereadable(g:OmniSharp_server_path)
  echoerr 'OmniSharp must be installed: '.expand(g:OmniSharp_server_path)
endif

" Set in WSL (default is 1 on cygwin)
" TODO: Auto detect WSL
"       OmniSharp の README によると、WSL 環境では以下のフラグをセットする
"       Cygwin ユーザなのでセット不要だが、WSL ユーザになった際は対応する
" let g:OmniSharp_translate_cygwin_wsl = 1

" Common
"let g:OmniSharp_loglevel = 'debug' " Set when chasing errors.
let g:OmniSharp_timeout = 50
let g:OmniSharp_highlight_groups = {
      \ 'Comment': 'NonText',
      \ 'XmlDocCommentName': 'Identifier',
      \ 'XmlDocCommentText': 'NonText'
      \}

augroup OmnisharpSettings
  autocmd!
  autocmd FileType cs nnoremap gd         :OmniSharpGotoDefinition<CR>
  autocmd FileType cs nnoremap <leader>fi :OmniSharpFindImplementations<CR>
  autocmd FileType cs nnoremap <leader>ft :OmniSharpFindType<CR>
  autocmd FileType cs nnoremap <leader>fs :OmniSharpFindSymbol<CR>
  autocmd FileType cs nnoremap <leader>fu :OmniSharpFindUsages<CR>
  autocmd FileType cs nnoremap <leader>fm :OmniSharpFindMembers<CR>
  autocmd FileType cs nnoremap <leader>x  :OmniSharpFixIssue<CR>
  autocmd FileType cs nnoremap <leader>fx :OmniSharpFixUsings<CR>
  autocmd FileType cs nnoremap <leader>tt :OmniSharpTypeLookup<CR>
  autocmd FileType cs nnoremap <leader>d  :OmniSharpDocumentation<CR>
  autocmd FileType cs nnoremap <C-K>      :OmniSharpNavigateUp<CR>
  autocmd FileType cs nnoremap <C-J>      :OmniSharpNavigateDown<CR>
  autocmd FileType cs nnoremap <leader>rn :OmniSharpRename<CR>
  autocmd FileType cs nnoremap <leader>cf :OmniSharpCodeFormat<CR>
  autocmd FileType cs nnoremap <leader>rl :OmniSharpReloadSolution<CR>
augroup END
endif

" 'Shougo/neocomplete.vim
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
    \ }
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.cs = '[^.]\.\%(\u\{2,}\)\?'

augroup NeocompleteSettings
  autocmd!
  " autocmd FileType cs setlocal omnifunc=OmniSharp#Complete
augroup END

